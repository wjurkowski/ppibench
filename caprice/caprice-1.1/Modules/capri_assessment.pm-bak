package casp_assessment;

require Exporter;
use strict;
use warnings;
use vars qw(@ISA @EXPORT $VERSION);
our @ISA = qw(Exporter);
our @EXPORT = qw(get_L_rms make_brugel parse_contacts);
$VERSION=1.0;


sub get_L_rms{
my ($f1,$f2)=@_;
open(OPT, ">prm-L_RMS") or die "Can not open an input file: $!";
print OPT "&basics\n";
print OPT "filetp=1,minres=5,stranal=1,num_mol=2\n";
print OPT "/\n";
print OPT "&geomet\n";
print OPT "bbaln=1,capri=1,recs=1,rece=125,ligs=126,lige=247\n";
print OPT "/\n";
print OPT "&inpout\n";
print OPT "pdbsave=0,outpdb=0\n";
print OPT "/\n";
close (OPT);
my @args=("pr_alchem", "prm-L_RMS", $$f1, $$f2);
my $wyn=`pr_alchem prm-L_RMS $$f1 $$f2`;
chomp $wyn;
if ($? == -1) {
	print "failed to execute: $!\n";
}
elsif ($? & 127) {
	printf "child died with signal %d, %s coredump\n",
	($? & 127),  ($? & 128) ? 'with' : 'without';
}
my @vyn=split(/\s+/,$wyn);
return $vyn[2];
}

sub make_brugel{
#correct_c - predicted native contacts
#native_c - native contacts
#not_correct - predicted non native contacts
#predicted_c - all contacts predicted
my ($mol,$contacts,$L_rms)=@_;

my $native_c=$$contacts[0];
my $predicted_c=$$contacts[1];
my $correct_c=$$contacts[2];
my $not_correct_c=$$contacts[3];

my $fnat=$correct_c/$native_c;
my $fnonnat=$not_correct_c/$predicted_c;

if($fnat>=0.5 and $$L_rms<=1.0){
printf GOUT "%s\t%s\t%d\t%7.3f\n",$$mol,"H",$fnat,$$L_rms;
}
elsif($fnat<0.5 and $fnat>=0.3 and $$L_rms<=5.0){
printf GOUT "%s\t%s\t%d\t%f7.3f\n",$$mol,"M",$fnat,$$L_rms;
}
elsif($fnat>=0.5 and $$L_rms>1.0){
printf GOUT "%s\t%s\t%d\t%7.3f\n",$$mol,"M",$fnat,$$L_rms;
}
elsif($fnat<0.3 and $fnat>=0.1 and $$L_rms <=10.0){
printf GOUT "%s\t%s\t%d\t%7.3f\n",$$mol,"A",$fnat,$$L_rms;
}
elsif($fnat>=0.3 and $$L_rms>5.0){
printf GOUT "%s\t%s\t%d\t%7.3f\n",$$mol,"A",$fnat,$$L_rms;
}
elsif($fnat<0.1 and $$L_rms>10.0){
printf GOUT "%s\t%s\t%d\t%7.3f\n",$$mol,"I",$fnat,$$L_rms;
}
}

sub parse_contacts {
my ($file1, $file2)=@_;
my %pary1=(), 
my %pary2=();
my $native_c=0;
my $predicted_c=0;
my $not_correct_c=0;
my $correct_c=0;

foreach my $line(@{$file1}){
	$line=~s/\(//g;
	$line=~s/\)//g;
	my @czasteczki=split(":",$line);
	 my @kontakty=split(";",$czasteczki[1]);
	  my @feat1=split(",",$czasteczki[0]);
	  foreach my $i(@kontakty){
		my @feat2=split(",",$i);
		my $pair=$feat1[0]."-".$feat2[0];
		if(exists $pary1{$pair}) {
                        my $cnt=$pary1{$pair}+1;
                        $pary1{$pair}=$cnt;}
		else{
			my $cnt=1;
			$pary1{$pair}=$cnt;}
	  }
}
$native_c=keys(%pary1);
print "$native_c";

foreach my $line(@{$file2}){
	$line=~s/\(//g;
	$line=~s/\)//g;
	my @czasteczki=split(":",$line);
	 my @kontakty=split(";",$czasteczki[1]);
	  my @feat1=split(",",$czasteczki[0]);
	  foreach my $i(@kontakty){
		my @feat2=split(",",$i);
		my $pair=$feat1[0]."-".$feat2[0];
		if(exists $pary2{$pair}) {
                        my $cnt=$pary2{$pair}+1;
                        $pary2{$pair}=$cnt;}
                else{
                        my $cnt=1;
                        $pary2{$pair}=$cnt;}
	  }
}

while (my ($key, $value) = each(%pary1)) {
	if (exists $pary2{$key}) {
	$correct_c++;
	$predicted_c++;
	}
	else {
	#print "$key, $value, $pary2{$key}\n";
	$predicted_c++;
	$not_correct_c++;
	}
}

my @results=($native_c,$predicted_c,$correct_c,$not_correct_c);
return @results;
}


