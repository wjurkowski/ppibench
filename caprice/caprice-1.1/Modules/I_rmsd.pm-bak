package I_rmsd;

require Exporter;
use strict;
use warnings;

use vars qw(@ISA @EXPORT $VERSION);
our @ISA = qw(Exporter);
our @EXPORT = qw(get_I_rmsd line distance);
$VERSION=1.0;

sub get_I_rmsd{
	my ($native_file,$predict_file)= @_;
	my @native_one;
	my @native_two;
	my @predict_one;
	my @predict_two;
	my @temp1;
	my @temp2;
	my @native;
	my @predict;
	my $count;
	my $chain="RANDOM";
	my $num;
	my $miss;

	#read in two files
	open NATIVE,"<$native_file"or die "can not open $native_file:$!";
	@native=<NATIVE>;
	chomp @native;
	@temp1=grep{/^ATOM.*?/} @native;
	open PREDICT,"<$predict_file"or die "can not open $predict_file:$!";
	@predict=<PREDICT>;
	chomp @predict;
	@temp2=grep{/^ATOM.*?/} @predict;

	#store the files as 2D matrix
	$count=0;
	$miss=0;
	for(my $i=0;$i<scalar(@temp1);$i++){
		if($temp1[$i]=~/^ATOM.*?/){
			$count++;
			#mark a chain ID
			if($count == 1){
				$chain=substr($temp1[$i],21,1);
			}
			#Chain One
			if($chain eq substr($temp1[$i],21,1)	){
			
			$native_one[$i-$miss][0]=substr($temp1[$i],7,4);#atom number
			$native_one[$i-$miss][1]=substr($temp1[$i],21,1);#Chain ID
			$native_one[$i-$miss][2]=substr($temp1[$i],32,6);#X
			$native_one[$i-$miss][3]=substr($temp1[$i],40,6);#Y
			$native_one[$i-$miss][4]=substr($temp1[$i],48,6);#Z
			$native_one[$i-$miss][5]=$i+1;#line number
			$num=scalar(@native_one);
			}
			#Chain Two
			if($chain ne substr($temp1[$i],21,1)	){
			
			$native_two[$i-$num-$miss][0]=substr($temp1[$i],7,4);#atom number
			$native_two[$i-$num-$miss][1]=substr($temp1[$i],21,1);#Chain ID
			$native_two[$i-$num-$miss][2]=substr($temp1[$i],32,6);#X
			$native_two[$i-$num-$miss][3]=substr($temp1[$i],40,6);#Y
			$native_two[$i-$num-$miss][4]=substr($temp1[$i],48,6);#Z
			$native_two[$i-$num-$miss][5]=$i+1;#line number
			}
		}
		else{
			$miss++;		
		}	
		
	}

	#get the line numbers for calculation
	my $num1=scalar(@native_one);
	my $num2=scalar(@native_two);
	my @bla=line(\@native_one,\@native_two,$num1,$num2);
	
	#do the calculation
	open ONE,">I_rmsd_1" or die"can not create I_rmsd_1:$!";
	for(my $i=0;$i<@bla;$i++){
		for(my $j=0;$j<@temp1;$j++){
		if($bla[$i] eq ($j+1)) {print ONE "$temp1[$j]\n";}
		}
	}
	close ONE;
	
	open TWO,">I_rmsd_2" or die"can not create I_rmsd_1:$!";
	for(my $i=0;$i<@bla;$i++){
		for(my $j=0;$j<@temp2;$j++){
		if($bla[$i] eq ($j+1)) {print TWO "$temp2[$j]\n";}
		}
	}
	close TWO;
	
	open(OPT, ">prm-RMSD") or die "Can not open an input file: $!";
	print OPT "&basics\n";
	print OPT "filetp=1,minres=2,stranal=1,num_mol=2\n";
	print OPT "/\n";
	print OPT "&geomet\n";
	print OPT "AAoverlay=0,bbaln=1,overlay=1,fit=0\n";
	print OPT "/\n";
	print OPT "&inpout\n";
	print OPT "pdbsave=0,outpdb=1\n";
	print OPT "/\n";
	close (OPT);

	my $temp=`pr_alchem prm-RMSD I_rmsd_1 I_rmsd_2`;
	`rm prm-RMSD I_rmsd_1 I_rmsd_2`;
	my @final=split(/	 /,$temp);
	return $final[1];
}

#calculate the distance and find the lines
	sub line{
		my($first,$second,$num1,$num2)=@_;
		my $distance;
		my @result_first;
		my @result_second;		
		for(my $i=0;$i<$num1;$i++){
			for(my $j=0;$j<$num2;$j++){
				#print "$$first[$i][2]	$$first[$i][3]	$$first[$i][4]	$$second[$j][2]	$$second[$j][3]	$$second[$j][4]\n";
				#die;
				$distance=distance($$first[$i][2],$$first[$i][3],$$first[$i][4],$$second[$j][2],$$second[$j][3],$$second[$j][4]);
				#print "$$first[$i][2]	$$first[$i][3]	$$first[$i][4]	$$second[$j][2]	$$second[$j][3]	$$second[$j][4]\n";
				if($distance <= 10){
					my $temp="$$first[$i][5]";
					push @result_first,$temp;
					my $temp2="$$second[$j][5]";
					push @result_second,$temp2;
				}
			}

		}
		my %hash=();
		my @result1 = grep{$hash{$_}++ <1} @result_first;
		my %hash2=();
		my @result2 = grep{$hash2{$_}++ <1} @result_second;
		my @result_final=(@result1,@result2);
		return @result_final;
	}



#Function for distance
	sub distance{
		my($x1,$y1,$z1,$x2,$y2,$z2)=@_;	
		my $square=($x1-$x2)**2+($y1-$y2)**2+($z1-$z2)**2;
		my $result=sqrt($square);
		return $result;
	}

